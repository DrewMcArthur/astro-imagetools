---
const { api, component } = Astro.props;

const dynamicText = component
  ? `${"`"}<${component} />${"`"} component`
  : `${"`"}render${api}${"`"} API`;

const isPicture =
  Astro.props.component === "Picture" || Astro.props.api === "renderPicture";

const isBackgroundImage =
  Astro.props.component === "BackgroundImage" ||
  Astro.props.api === "renderBackgroundImage";
---

<!-- prettier-ignore -->
<Markdown is:raw>
  ### `artDirectives`

  **Type:** `ArtDirective[]`
</Markdown>

<!-- prettier-ignore -->
{isPicture ? (
  <Markdown is:raw>
    *An `ArtDirective` object can take all the props supported by the{" "}
    {<Fragment set:html={dynamicText} />} except `alt`, `preload`, `loading`,
    `decoding`, `attributes`, `layout`, and `fadeInTransition`. The only
    addition is `media`. Only the [`src`](#src) and [`media`](#media) properties
    are required.*
  </Markdown>
) : isBackgroundImage ? (
  <Markdown is:raw>
    *An `ArtDirective` object can take all the props supported by the{" "}
    {<Fragment set:html={dynamicText} />} except `attributes`. The only addition
    is `media`. Only the [`src`](#src) and [`media`](#media) properties are
    required.*
  </Markdown>
) : (
  <Markdown is:raw>
    *An `ArtDirective` object can take all the props supported by the{" "}
    {<Fragment set:html={dynamicText} />} except `preload`, `loading`,
    `decoding`, `attributes`, and `fadeInTransition`. The only addition is
    `media`. Only the [`src`](#src) and [`media`](#media) properties are
    required.*
  </Markdown>
)}

<Markdown is:raw>
  **Default:** `undefined`

  The list of art directions to be applied to the generated picture.

  **Code Example:**
</Markdown>

<CodeExample
  {...Astro.props}
  values={[
    {
      src: "/src/images/landscape.jpg",
      alt: "alt text",
      artDirectives: `[
    {
      media: "(max-aspect-ratio: 3/2)",
      src: "/src/images/portrait.jpg",
      breakpoints: [256, 384, 576],
      width: 768,
      height: 1024,
      format: ["avif"],
      fallbackFormat: "webp",
      includeSourceFormat: false,
    },
  ]`,
    },
  ]}
/>

<!-- prettier-ignore -->
<Markdown is:raw>
  #### `media`

  **Type:** `string`

  **Default:** `undefined`

  The CSS media query to use to define the art direction.

  **Code Example:**
</Markdown>

<CodeExample
  {...Astro.props}
  values={[
    {
      src: "/src/image/landscape.jpg",
      alt: "A landscape image",
      rotate: 22.5,
      artDirectives: `[
    {
      src: "/src/image/dark-potrait.jpg",
      media: "(prefers-color-scheme: dark) and (orientation: portrait)",
    },
    {
      src: "/src/image/light-potrait.jpg",
      media: "(prefers-color-scheme: light) and (orientation: portrait)",
    },
    {
      src: "/src/image/dark-landscape.jpg",
      media: "(prefers-color-scheme: dark) and (orientation: landscape)",
    },
  ]`,
    },
  ]}
/>
