---
import { Code } from "astro/components";

const { values, global, api, component } = Astro.props;

const isJS = component ? false : true;

const isGlobal = global;

const comment = (text) => (isJS ? `// ${text}` : `<!-- ${text} -->`) + "\n";

function formatValue(value) {
  let formattedValue = ["number", "boolean", "function"].includes(typeof value)
    ? `${value}`
    : Array.isArray(value)
    ? `${value[0]}`
    : typeof value === "string" &&
      (value.startsWith("{") || value.startsWith("["))
    ? value
    : `"${value}"`;

  if (typeof value === "function") {
    formattedValue = formattedValue.replaceAll(/\n\s+/g, "\n    ");

    formattedValue = formattedValue.replace(/\n\s+\}$/, "\n  }");
  }

  if (component) {
    (formattedValue.startsWith("{") ||
      formattedValue.startsWith("[") ||
      ["number", "boolean", "function"].includes(typeof value) ||
      Array.isArray(value)) &&
      (formattedValue = `{${formattedValue}}`);
  }

  return formattedValue;
}

function code(props, { api, component }) {
  const builtProps = Object.keys(props)
    .filter((key) =>
      isGlobal
        ? ["src", "alt", "tag", "content", "artDirectives"].includes(key)
          ? false
          : true
        : true
    )
    .map((key) =>
      key === "comment"
        ? `/* ${props[key]} */`
        : key + (isJS ? ": " : "=") + `${formatValue(props[key])}`
    )
    .join(`${isJS ? "," : ""}\n  `);

  return (
    `${
      isJS
        ? isGlobal
          ? `export default defineConfig({`
          : `const renderedHTML = await ${api}({`
        : `<${component}`
    }
  ${builtProps}${isJS ? "," : ""}
${isJS ? `});` : `/>`}` + "\n"
  );
}

const codeBlock = values
  .map((value) =>
    value === ""
      ? "\n"
      : typeof value === "string"
      ? comment(value)
      : Array.isArray(value)
      ? isJS
        ? value.filter((value) => value !== "---").join("\n") + "\n"
        : value.join("\n") + "\n"
      : code(value, { api, component })
  )
  .join("");
---

<Code code={codeBlock} lang={isJS ? "js" : "astro"} />
